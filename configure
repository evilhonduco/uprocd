#!/usr/bin/env perl

use File::Temp qw/tempfile/;
use Getopt::Long;
use Pod::Usage;

sub clean {
  my $ref = shift;
  $$ref =~ s/\s+/ /g;
  $$ref =~ s/^\s+|\s+$//g;
}

sub which {
  my $prog = shift;
  return undef if !defined($prog);
  return -X $prog && $prog if index($prog, '/') != -1;
  for my $dir (split /:/, $ENV{PATH}) {
    return "$dir/$prog" if -X "$dir/$prog";
  }
  return undef;
}

sub c_test {
  my $cc = shift;
  my $cflags = shift;
  my $ldflags = shift;
  my $src = shift;

  clean \$cflags;
  clean \$ldflags;

  my ($fh, $filename) = tempfile(UNLINK => 1);
  print $fh $src;
  close $fh;

  my $ret = system "$cc -xc $cflags '$filename' -o /dev/stdout $ldflags > /dev/null";
  unlink $filename;
  return $ret == 0;
}

sub pkg_config {
  my $pkg = shift;
  my $cflags = `pkg-config --cflags $pkg 2>/dev/null`;
  my $ldflags = `pkg-config --libs $pkg 2>/dev/null`;
  return undef if length($cflags) == 0 || length($ldflags) == 0;
  return (1, $cflags, $ldflags);
}

sub error {
  my $msg = shift;
  print "$msg\n";
  exit 1;
}

sub fail {
  my $msg = shift;
  print "failed\n";
  error $msg;
}

my $cflags = $ENV{CFLAGS} || '';
my $ldflags = $ENV{LDFLAGS} || '';

my $help = 0;
my $mode = 'debug';
my $python = 'auto';
my $ruby = 'auto';
my $docs = 'auto';

GetOptions('help|h' => \$help, 'mode|m=s' => \$mode, 'python=s' => \$python,
           'ruby=s' => \$ruby, 'docs=s' => \$docs);
pod2usage(1) if $help;

error "Invalid build mode: $mode." if $mode !~ m/debug-asan|debug|release/;

print "*********************************************\n";
print "********** uprocd configure script **********\n";
print "*********************************************\n";
print "\n";

print 'Finding C compiler... ';
my $cc = which($ENV{CC}) || which('clang') || which('gcc') || which('cc');
fail 'Failed to locate C compiler.' if !defined($cc);
print "$cc\n";

print 'Finding libsystemd... ';
my ($systemd_success, $systemd_cflags, $systemd_ldflags) = pkg_config 'libsystemd';
fail 'Failed to detect libsystemd.' if !$systemd_success;
print "ok\n";

$cflags .= $systemd_cflags;
$ldflags .= $systemd_ldflags;

print 'Checking for Judy... ';
my $judy = c_test $cc, $cflags, "$ldflags -lJudy",
                  "#include <Judy.h>\nint main() { return 0; }";
fail 'Failed to compile a program requiring Judy.' if !$judy;
print "ok\n";

if ($python eq 'auto') {
  print 'Checking for python3-config... ';
  $python = defined(which($ENV{PYTHON_CONFIG}) || which('python3-config')) ? 'yes' : 'no';
  print "$python\n";

  if ($python eq 'yes') {
    $cflags .= `python3-config --cflags`;
    $ldflags .= `python3-config --libs`;
  }
}

my $rubybin;

if ($ruby eq 'auto' || $docs eq 'auto') {
  print 'Checking for Ruby... ';
  $rubybin = which($ENV{RUBY}) || which('ruby');
  my $status = defined($rubybin) ? 'yes' : 'no';
  print "$status\n";
  $ruby = $status if $ruby eq 'auto';
  $docs = $status if $docs eq 'auto';
}

if ($ruby eq 'yes') {
  print 'Checking for Ruby pkg-config files... ';
  my ($rubyver) = `$rubybin --version` =~ /^ruby (\d+\.\d+)/;
  goto ruby_failed if !defined($rubyver);
  my ($ruby_success, $ruby_cflags, $ruby_ldflags) = pkg_config "ruby-$rubyver";
  goto ruby_failed if !$ruby_success;

  $cflags .= $ruby_cflags;
  $ldflags .= $ruby_ldflags;
  goto ruby_end;

  ruby_failed:
  $ruby = 'no';
  ruby_end:
  print "$ruby\n";
}

if ($mode eq 'debug') {
  $cflags .= ' -g ';
} elsif ($mode eq 'release') {
  $cflags .= ' -O2 ';
} elsif ($mode eq 'debug-asan') {
  $cflags .= ' -fsanitize=address -g ';
  $ldflags .= ' -fsanitize=address ';
}

clean \$cflags;
clean \$ldflags;

print "Writing tup.config... ";

open my $fh, '>tup.config' or error 'Error opening tup.config for writing.';

print $fh "CONFIG_CC=$cc\n";
print $fh "CONFIG_CFLAGS=$cflags\n";
print $fh "CONFIG_LDFLAGS=$ldflags\n";
print $fh "CONFIG_MODE=$mode\n";

print $fh "CONFIG_PYTHON=$python\n";
print $fh "CONFIG_RUBY=$ruby\n";

print $fh "CONFIG_RUBY_BIN=$rubybin\n" if defined($rubybin);
print $fh "CONFIG_DOCS=yes\n" if $docs eq 'yes';

close $fh;

print "done\n";

print "\n";
print "***************************************\n";
print "********** Configure results **********\n";
print "***************************************\n";
print "\n";
print "Build mode: $mode\n";
print "C compiler: $cc\n";
print "C compiler flags: $cflags\n";
print "C compiler flags: $ldflags\n";
print "Build docs: $docs@{[defined($rubybin) ? (' (using Ruby: ' . $rubybin . ')') : '']}\n";
print "\n";
print "===================\n";
print "===== Modules =====\n";
print "===================\n";
print "\n";
print "Python module: $python\n";
print "Ruby module: $ruby\n";
print "\n";
print "Run 'tup' to build.\n";
print "\n";

__END__

=head1 SYNOPSIS

./configure [-help] [-mode=debug-asan|debug|release] [-python=auto|no] [-ruby=auto|no] [-docs=auto|no]

Options:

  -help       Show this page.
  -mode       Set the build mode (default is debug).
                debug         Build with debug symbols.
                debug-asan    Build with debug symbols and the address sanitizer.
                release       Build in release mode.
  -python     Whether or not to build the Python modules (default is auto).
                yes           Always build the Python modules.
                no            Don't build the Python modules.
                auto          Automatically determine based on whether or not Python is installed
  -ruby       Whether or not to build the Python modules (default is auto).
                yes           Always build the Ruby modules.
                no            Don't build the Ruby modules.
                auto          Automatically determine based on whether or not Ruby is installed.
  -docs       Whether or not to build the man pages.
                yes           Always build the man pages.
                no            Don't build the man pages.
                auto          Automatically determine based on whether or not Ruby is installed.

=cut
